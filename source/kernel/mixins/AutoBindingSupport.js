(function (enyo) {

	//*@public
	/**
		This hash contains a mapping of the auto binding API properties
		to their equivalents in the actual bindings API.
	*/
	var remapped = {
		bindFrom: "from",
		bindTo: "to",
		bindTransform: "transform",
		bindOneWay: "oneWay",
		bindTwoWay: "twoWay",
		bindAutoSync: "autoSync",
		bindDebug: "debug",
		bindSource: "source"
	};

	//*@public
	/**
		This hash contains the default properties applied to new bindings
		generated by the auto bindings setup. These properties fill in gaps
		where new values are not supplied, but do not override specified
		values.
	*/
	var defaults = {
		to: ".content",
		transform: null,
		oneWay: true,
		twoWay: false,
		autoSync: true,
		debug: false
	};

	//*@protected
	var _setupAutoBindings = function () {
		if (!this._supportsAutoBindings) {
			return;
		}
		var controls = this.get("_bindableControls");
		var idx = 0;
		var len = controls.length;
		var bindSource = this.bindSource || this.model;
		var control;
		var props;
		var b;
		var xtra;
		if (enyo.isString(bindSource)) {
			bindSource = this.get(bindSource) || enyo.getPath(bindSource);
		}
		for (; idx < len; ++idx) {
			xtra = enyo.pool.claimObject();
			control = controls[idx];
			props = this._bindProperties(control);
			if (props.source && enyo.isString(props.source)) {
				props.source = enyo.getPath.call(control, props.source);
			}
			xtra.source = props.source || bindSource;
			xtra.target = control;
			enyo.mixin(props, xtra);
			if ((b=control._autoBinding)) {
				b.disconnect();
				enyo.mixin(b, props, {exists: true});
				b.refresh();
			} else {
				b = this._autoBinding(props);
				control._autoBinding = b;
			}
			enyo.pool.releaseObject(xtra);
		}
	};

	//*@public
	/**
		The _enyo.AutoBindingSupport_ mixin provides the ability to
		define bindings from child components relative to their _owner_.
		In a component declaration (object literal hash for components),
		simply use the available auto bindings API and a binding will
		be created accordingly.
	*/
	enyo.createMixin({

		// ...........................
		// PUBLIC PROPERTIES

		//*@public
		name: "enyo.AutoBindingSupport",

		// ...........................
		// PROTECTED PROPERTIES

		//*@protected
		_supportsAutoBindings: true,

		// ...........................
		// COMPUTED PROPERTIES

		//*@protected
		_bindableControls: enyo.computed(function (control) {
			control = control || this;
			var bindable = [];
			var controls = control.controls || [];
			var idx = 0;
			var len = controls.length;
			for (; idx < len; ++idx) {
				bindable = bindable.concat(this._bindableControls(controls[idx]));
			}
			if ("bindFrom" in control) {
				bindable.push(control);
			}
			return bindable;
		}, {cached: true}),

		//*@protected
		_bindingDefaults: enyo.computed(function () {
			var ctor = this.get("_bindingConstructor");
			var keys = enyo.keys(defaults);
			if (enyo.Binding !== ctor) {
				return enyo.mixin(enyo.clone(defaults),
					enyo.only(keys, ctor.prototype, true));
			} else {
				return enyo.clone(defaults);
			}
		}, {cached: true}),

		//*@protected
		_autoBindings: enyo.computed(function () {
			return enyo.filter(this.bindings || [], function (bind) {
				return bind && bind._autoBindingId;
			});
		}),

		// ...........................
		// PROTECTED METHODS

		//*@protected
		_autoBinding: function () {
			var bind = this.binding.apply(this, arguments);
			bind._autoBindingId = enyo.uid("_autoBinding");
			return bind;
		},

		//*@protected
		_bindProperties: function (control) {
			var props = this.get("_bindingDefaults");
			return enyo.mixin(enyo.remap(remapped, control), props, true);
		},

		//*@public
		/**
			This is overloaded so that we allow the default behavior for
			any bindings that are not auto-bindings as a normal rebuild will
			not work.
		*/
		rebuildBindings: function () {
			var $b = enyo.filter(this.bindings || [], function (b) {
				return b && !b._autoBinding;
			});
			var $t = enyo.pool.claimObject();
			$t[0] = $b;
			this.inherited(arguments, $t);
			_setupAutoBindings.call(this);
			enyo.pool.releaseObject($t);
		},

		//*@protected
		create: function () {
			var prop = this.bindSource || "model";
			// NOTE: We don't need to register for the model property as enyo.Control
			// will automatically trigger the rebuildBindings call which we have modified
			// to handle this properly
			if (prop != "model") {
				this.addObserver(prop, _setupAutoBindings, this);
			}
			if (prop == "model" && this.model && this.model._isModel) {
				_setupAutoBindings.call(this);
			}
		}

	});

}(enyo));
